import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { formatPrice } from '../utils/formatters';
import '../styles/ProjectCard.css';

const ProjectCard = ({ project, isOwner, onDelete }) => {
  const navigate = useNavigate();
  const [responseError, setResponseError] = useState('');
  const [showResponseForm, setShowResponseForm] = useState(false);
  const [statusUpdateError, setStatusUpdateError] = useState('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [editOrderError, setEditOrderError] = useState('');
  const [responseData, setResponseData] = useState({
    price: '',
    comment: '',
  });
  const [orderData, setOrderData] = useState({
    title: project.title,
    description: project.description,
    start_price: project.start_price,
    expected_price: project.expected_price,
    deadline: project.deadline,
    requirements: project.requirements,
    category: project.category
  });

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusInfo = (status_id) => {
    const statuses = {
      1: {
        text: '–ê–∫—Ç–∏–≤–Ω—ã–π',
        description: '–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤',
        class: 'status-active',
        icon: 'üü¢'
      },
      2: {
        text: '–í —Ä–∞–±–æ—Ç–µ',
        description: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω',
        class: 'status-in-progress',
        icon: 'üîÑ'
      },
      3: {
        text: '–ó–∞–≤–µ—Ä—à–µ–Ω',
        description: '–ü—Ä–æ–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç',
        class: 'status-completed',
        icon: '‚úÖ'
      },
    };
    return statuses[status_id] || {
      text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
      description: '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      class: 'status-unknown',
      icon: '‚ùì'
    };
  };

  const handleEdit = () => {
    navigate(`/edit-project/${project.id}`);
  };

  const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  };

  const handleResponse = async (e) => {
    e.preventDefault();
    const token = getCookie('access_token');
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      const response = await fetch(`http://localhost:8000/responses/create/${project.id}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(responseData)
      });

      if (response.ok) {
        setShowResponseForm(false);
        setResponseData({ price: '', comment: '' });
      } else {
        const errorData = await response.text();
        setResponseError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞: ${errorData}`);
      }
    } catch (err) {
      setResponseError(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  const handleStatusChange = async (newStatus) => {
    const token = getCookie('access_token');
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      const response = await fetch(`http://localhost:8000/projects/${project.id}/status`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ status_id: parseInt(newStatus) })
      });

      if (!response.ok) {
        const errorData = await response.text();
        setStatusUpdateError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${errorData}`);
        return;
      }

      // Refresh the page or update the project state
      window.location.reload();
    } catch (err) {
      setStatusUpdateError(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  const handleEditOrder = async (e) => {
    e.preventDefault();
    const token = getCookie('access_token');
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      const response = await fetch(`http://localhost:8000/projects/${project.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(orderData)
      });

      if (!response.ok) {
        const errorData = await response.text();
        setEditOrderError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${errorData}`);
        return;
      }

      setShowEditForm(false);
      window.location.reload();
    } catch (err) {
      setEditOrderError(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  const statusInfo = getStatusInfo(project.status_id);

  return (
    <div className="project-card">
      <div className="project-header">
        <h1>{project.title}</h1>
        <div className="project-meta">
          <div className="status-section">
            <div className={`status ${statusInfo.class}`}>
              <span className="status-icon">{statusInfo.icon}</span>
              <span className="status-text">{statusInfo.text}</span>
            </div>
            <span className="status-description">{statusInfo.description}</span>
          </div>
          <span className="category">{project.category}</span>
          <div className="price-info">
            <span className="price">
              –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {formatPrice(project.start_price)} ‚ÇΩ
            </span>
            {project.expected_price && (
              <span className="price expected">
                –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞: {formatPrice(project.expected_price)} ‚ÇΩ
              </span>
            )}
          </div>
        </div>
      </div>

      <div className="project-info">
        <div className="info-section">
          <h2>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h2>
          <p>{project.description}</p>
        </div>

        <div className="info-section">
          <h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
          <ul>
            {project.deadline && (
              <li>
                <strong>–î–µ–¥–ª–∞–π–Ω:</strong> {formatDate(project.deadline)}
              </li>
            )}
            <li>
              <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {project.category}
            </li>
            <li>
              <strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {formatDate(project.created_at)}
            </li>
            {project.updated_at && (
              <li>
                <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> {formatDate(project.updated_at)}
              </li>
            )}
          </ul>
        </div>

        {project.requirements && (
          <div className="info-section">
            <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
            <p>{project.requirements}</p>
          </div>
        )}

        {isOwner ? (
          <div className="author-controls">
            <div className="status-control">
              <select
                value={project.status_id}
                onChange={(e) => handleStatusChange(e.target.value)}
                className="status-select"
              >
                <option value="1">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                <option value="2">–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="3">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                <option value="4">–û—Ç–º–µ–Ω–µ–Ω</option>
              </select>
              {statusUpdateError && (
                <div className="error-message">{statusUpdateError}</div>
              )}
            </div>
            <button onClick={() => setShowEditForm(true)} className="edit-btn">
              –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
            <button onClick={onDelete} className="delete-btn">
              –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
            </button>
          </div>
        ) : project.status_id === 1 && (
          <div className="response-section">
            {!showResponseForm ? (
              <button 
                onClick={() => setShowResponseForm(true)} 
                className="respond-button"
              >
                –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
              </button>
            ) : (
              <div className="response-form">
                <h3>–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç</h3>
                {responseError && (
                  <div className="error-message">{responseError}</div>
                )}
                <form onSubmit={handleResponse}>
                  <div className="form-group">
                    <label>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                    <input
                      type="number"
                      value={responseData.price}
                      onChange={(e) => setResponseData({
                        ...responseData,
                        price: e.target.value
                      })}
                      required
                      min={project.start_price || 0}
                      placeholder={`–ú–∏–Ω–∏–º—É–º ${formatPrice(project.start_price)} ‚ÇΩ`}
                    />
                  </div>
                  <div className="form-group">
                    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                    <textarea
                      value={responseData.comment}
                      onChange={(e) => setResponseData({
                        ...responseData,
                        comment: e.target.value
                      })}
                      required
                      rows="4"
                      placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
                    />
                  </div>
                  <div className="form-actions">
                    <button type="submit" className="save-button">
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
                    </button>
                    <button
                      type="button"
                      className="cancel-button"
                      onClick={() => {
                        setShowResponseForm(false);
                        setResponseError('');
                      }}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
        )}

        {showEditForm && isOwner && (
          <div className="edit-form-overlay">
            <div className="edit-form">
              <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
              {editOrderError && (
                <div className="error-message">{editOrderError}</div>
              )}
              <form onSubmit={handleEditOrder}>
                <div className="form-group">
                  <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                  <input
                    type="text"
                    value={orderData.title}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      title: e.target.value
                    })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                  <textarea
                    value={orderData.description}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      description: e.target.value
                    })}
                    required
                    rows="4"
                  />
                </div>
                <div className="form-group">
                  <label>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                  <input
                    type="number"
                    value={orderData.start_price}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      start_price: e.target.value
                    })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                  <input
                    type="number"
                    value={orderData.expected_price}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      expected_price: e.target.value
                    })}
                  />
                </div>
                <div className="form-group">
                  <label>–î–µ–¥–ª–∞–π–Ω</label>
                  <input
                    type="datetime-local"
                    value={orderData.deadline ? new Date(orderData.deadline).toISOString().slice(0, 16) : ''}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      deadline: e.target.value
                    })}
                  />
                </div>
                <div className="form-group">
                  <label>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</label>
                  <textarea
                    value={orderData.requirements}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      requirements: e.target.value
                    })}
                    rows="4"
                  />
                </div>
                <div className="form-group">
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <input
                    type="text"
                    value={orderData.category}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      category: e.target.value
                    })}
                    required
                  />
                </div>
                <div className="form-actions">
                  <button type="submit" className="save-button">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </button>
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={() => {
                      setShowEditForm(false);
                      setEditOrderError('');
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectCard;
