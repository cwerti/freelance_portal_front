import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { formatPrice } from '../utils/formatters';
import { jwtDecode } from 'jwt-decode';
import '../styles/ProjectCard.css';

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
const spinKeyframes = `
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const ProjectCard = ({ project, isOwner, onDelete }) => {
  const navigate = useNavigate();
  
  console.log('ProjectCard rendered with props:', {
    projectId: project?.id,
    isOwner: isOwner,
    authorId: project?.author_id
  });

  const [responseError, setResponseError] = useState('');
  const [showResponseForm, setShowResponseForm] = useState(false);
  const [showBidsModal, setShowBidsModal] = useState(false);
  const [bids, setBids] = useState([]);
  const [bidsError, setBidsError] = useState('');
  const [statusUpdateError, setStatusUpdateError] = useState('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [editOrderError, setEditOrderError] = useState('');
  const [responseData, setResponseData] = useState({
    price: '',
    comment: '',
  });
  const [orderData, setOrderData] = useState({
    name: project.title || project.name,
    description: project.description,
    startPrice: project.start_price,
    categoryId: project.category_id || 1,
    statusId: project.status_id
  });
  const [categories, setCategories] = useState([]);
  const [loadingCategories, setLoadingCategories] = useState(false);
  const [isLoadingBids, setIsLoadingBids] = useState(false);
  const [isSubmittingBid, setIsSubmittingBid] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoadingCategories(true);
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const response = await fetch('http://localhost:8000/orders/categories', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', data);
          setCategories(data);
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', response.status);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
      } finally {
        setLoadingCategories(false);
      }
    };

    fetchCategories();
  }, []);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusInfo = (status_id) => {
    const statuses = {
      1: {
        text: '–ê–∫—Ç–∏–≤–Ω—ã–π',
        description: '–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤',
        class: 'status-active',
        icon: 'üü¢'
      },
      2: {
        text: '–í —Ä–∞–±–æ—Ç–µ',
        description: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω',
        class: 'status-in-progress',
        icon: 'üîÑ'
      },
      3: {
        text: '–ó–∞–≤–µ—Ä—à–µ–Ω',
        description: '–ü—Ä–æ–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç',
        class: 'status-completed',
        icon: '‚úÖ'
      },
    };
    return statuses[status_id] || {
      text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
      description: '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      class: 'status-unknown',
      icon: '‚ùì'
    };
  };

  const handleEdit = () => {
    navigate(`/edit-project/${project.id}`);
  };

  const getCookie = (name) => {
    try {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) {
        const token = parts.pop().split(';').shift();
        console.log('Found token in cookies:', token ? 'Yes' : 'No');
        return token;
      }
      console.log('Token not found in cookies');
      return null;
    } catch (err) {
      console.error('Error reading cookie:', err);
      return null;
    }
  };

  const validateToken = (token) => {
    try {
      const decodedToken = jwtDecode(token);
      console.log('Token contents:', decodedToken);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
      const currentTime = Date.now() / 1000;
      if (decodedToken.exp && decodedToken.exp < currentTime) {
        console.error('Token has expired');
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–æ–ª–µ sub –∏–ª–∏ id)
      const userId = parseInt(decodedToken.id || decodedToken.sub);
      console.log('Extracted user ID:', userId);

      if (isNaN(userId)) {
        console.error('Invalid user ID in token');
        return null;
      }

      return userId;
    } catch (err) {
      console.error('Error validating token:', err);
      return null;
    }
  };

  const handleResponse = async (e) => {
    e.preventDefault();
    const token = getCookie('access_token');
    
    if (!token) {
      setResponseError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
      navigate('/login');
      return;
    }

    try {
      setIsSubmittingBid(true);
      setResponseError('');

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
      const decodedToken = jwtDecode(token);
      const userId = decodedToken.id;

      if (!userId) {
        setResponseError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      if (!responseData.price || !responseData.comment) {
        setResponseError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
      if (!project.id) {
        setResponseError('–û—à–∏–±–∫–∞: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const bidData = {
        userId: parseInt(userId),
        price: parseFloat(responseData.price),
        comment: responseData.comment.trim()
      };

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∞:', bidData);
      console.log('URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', `http://localhost:8000/bids/orders/${project.id}/bids`);

      // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º preflight –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
      const preflightResponse = await fetch(`http://localhost:8000/bids/orders/${project.id}/bids`, {
        method: 'OPTIONS',
        headers: {
          'Origin': window.location.origin,
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Authorization, Content-Type'
        }
      }).catch(err => {
        console.log('Preflight request failed:', err);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ preflight –Ω–µ —É–¥–∞–ª—Å—è
        return { ok: false };
      });

      const response = await fetch(`http://localhost:8000/bids/orders/${project.id}/bids`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Origin': window.location.origin
        },
        body: JSON.stringify(bidData)
      });

      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É—Å–ø–µ—à–Ω—ã–π
      const responseText = await response.text();
      console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
      
      if (!response.ok) {
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          const apiResponse = responseText ? JSON.parse(responseText) : {};
          
          if (apiResponse.detail) {
            const errorMessage = Array.isArray(apiResponse.detail) 
              ? apiResponse.detail[0].msg 
              : apiResponse.detail;
            setResponseError(`–û—à–∏–±–∫–∞: ${errorMessage}`);
          } else {
            setResponseError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞: ${response.status}`);
          }
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
          setResponseError(`–û—à–∏–±–∫–∞: ${responseText || response.statusText}`);
        }
        return;
      }

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π
      setShowResponseForm(false);
      setResponseData({ price: '', comment: '' });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
      alert('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞:', err);
      setResponseError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${err.message}`);
    } finally {
      setIsSubmittingBid(false);
    }
  };

  const handleStatusChange = async (newStatus, bidId = null) => {
    const token = getCookie('access_token');
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      let url = bidId 
        ? `http://localhost:8000/bids/bids/${bidId}/accept`
        : `http://localhost:8000/orders/update?order_id=${project.id}`;

      let body = bidId 
        ? {}
        : {
            name: project.name || project.title,
            description: project.description,
            startPrice: parseInt(project.start_price),
            categoryId: parseInt(project.category_id),
            statusId: parseInt(newStatus)
          };

      const response = await fetch(url, {
        method: bidId ? 'PATCH' : 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(body)
      });

      if (!response.ok) {
        const errorData = await response.text();
        setStatusUpdateError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${errorData}`);
        return;
      }

      window.location.reload();
    } catch (err) {
      setStatusUpdateError(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  const handleEditOrder = async (e) => {
    e.preventDefault();
    const token = getCookie('access_token');
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!orderData.name || !orderData.description || !orderData.startPrice) {
        setEditOrderError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      const body = {
        name: orderData.name,
        description: orderData.description,
        startPrice: parseInt(orderData.startPrice),
        categoryId: parseInt(project.category_id), // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        statusId: parseInt(orderData.statusId)
      };

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', body);

      const response = await fetch(`http://localhost:8000/orders/update?order_id=${project.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Origin': window.location.origin
        },
        body: JSON.stringify(body)
      });

      const responseText = await response.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);

      if (!response.ok) {
        setEditOrderError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${responseText}`);
        return;
      }

      setShowEditForm(false);
      window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
      setEditOrderError(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤
  const fetchBids = async () => {
    const token = getCookie('access_token');
    if (!token) {
      setBidsError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    try {
      setIsLoadingBids(true);
      setBidsError('');
      
      if (!project.id) {
        console.error('ID –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        setBidsError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', project.id);
      
      const response = await fetch(`http://localhost:8000/bids/orders/${project.id}/bids`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Origin': window.location.origin
        }
      });

      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      const responseText = await response.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);

      if (!response.ok) {
        if (response.status === 404) {
          // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–æ–≤—ã–π –∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
          console.log('–û—Ç–∫–ª–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç)');
          setBids([]);
          setShowBidsModal(true);
          return;
        }
        
        setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤: ${response.status}`);
        return;
      }

      try {
        const bidsData = responseText ? JSON.parse(responseText) : [];
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:', bidsData);
        setBids(Array.isArray(bidsData) ? bidsData : []);
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON:', parseError);
        setBids([]);
      }
      
      setShowBidsModal(true);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤:', err);
      setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤: ${err.message}`);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      setBids([]);
      setShowBidsModal(true);
    } finally {
      setIsLoadingBids(false);
    }
  };

  const handleAcceptBid = async (bidId) => {
    const token = getCookie('access_token');
    if (!token) {
      setBidsError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    try {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–∫–ª–∏–∫
      const acceptResponse = await fetch(`http://localhost:8000/bids/bids/${bidId}/accept`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Origin': window.location.origin
        }
      });

      if (!acceptResponse.ok) {
        const errorText = await acceptResponse.text();
        setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–∫–ª–∏–∫–∞: ${errorText}`);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
      const updateStatusResponse = await fetch(`http://localhost:8000/orders/update?order_id=${project.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Origin': window.location.origin
        },
        body: JSON.stringify({
          name: project.name || project.title,
          description: project.description,
          startPrice: parseInt(project.start_price),
          categoryId: parseInt(project.category_id),
          statusId: 2 // –°—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
        })
      });

      if (!updateStatusResponse.ok) {
        const errorText = await updateStatusResponse.text();
        setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${errorText}`);
        return;
      }

      await fetchBids(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
      window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', err);
      setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–∫–ª–∏–∫–∞: ${err.message}`);
    }
  };

  const handleRejectBid = async (bidId) => {
    const token = getCookie('access_token');
    if (!token) {
      setBidsError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    try {
      const response = await fetch(`http://localhost:8000/bids/bids/${bidId}/reject`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Origin': window.location.origin
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞: ${errorText}`);
        return;
      }

      await fetchBids(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', err);
      setBidsError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞: ${err.message}`);
    }
  };

  const getBidStatusText = (status) => {
    const statuses = {
      1: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
      2: '–ü—Ä–∏–Ω—è—Ç',
      3: '–û—Ç–∫–ª–æ–Ω–µ–Ω'
    };
    return statuses[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
  const BidsModal = () => {
    if (!showBidsModal) return null;

    const modalStyles = {
      overlay: {
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        zIndex: 1000,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
      },
      modal: {
        backgroundColor: '#fff',
        borderRadius: '12px',
        boxShadow: '0 5px 20px rgba(0, 0, 0, 0.2)',
        width: '90%',
        maxWidth: '700px',
        maxHeight: '80vh',
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column'
      },
      header: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '15px 20px',
        borderBottom: '1px solid #eee',
        backgroundColor: '#f8f8f8'
      },
      closeButton: {
        border: 'none',
        background: 'none',
        fontSize: '24px',
        cursor: 'pointer',
        color: '#777'
      },
      content: {
        padding: '20px',
        overflowY: 'auto',
        flex: 1
      },
      errorMessage: {
        padding: '10px 15px',
        margin: '0 20px 15px',
        backgroundColor: '#ffebee',
        color: '#c62828',
        borderRadius: '5px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between'
      },
      retryButton: {
        padding: '5px 10px',
        backgroundColor: '#e0e0e0',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        marginLeft: '10px'
      },
      noBids: {
        textAlign: 'center',
        padding: '30px 20px',
        color: '#757575'
      },
      infoText: {
        textAlign: 'center',
        color: '#757575',
        fontSize: '14px',
        marginTop: '10px'
      },
      refreshButton: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '8px 15px',
        backgroundColor: '#f0f0f0',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        color: '#333',
        fontSize: '14px',
        marginBottom: '15px',
        transition: 'background-color 0.3s'
      },
      refreshIcon: {
        marginRight: '5px',
        fontSize: '16px'
      },
      loadingSpinner: {
        display: 'inline-block',
        width: '16px',
        height: '16px',
        border: '2px solid rgba(0, 0, 0, 0.1)',
        borderRadius: '50%',
        borderTopColor: '#333',
        animation: 'spin 1s ease-in-out infinite',
        marginRight: '8px'
      },
      headerActions: {
        display: 'flex',
        alignItems: 'center'
      }
    };

    return (
      <>
        {/* –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ */}
        <style>{spinKeyframes}</style>
        
        <div style={modalStyles.overlay}>
          <div style={modalStyles.modal}>
            <div style={modalStyles.header}>
              <h2>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç</h2>
              <div style={modalStyles.headerActions}>
                <button 
                  onClick={fetchBids} 
                  style={{...modalStyles.refreshButton, marginRight: '10px'}}
                  disabled={isLoadingBids}
                >
                  {isLoadingBids ? (
                    <>
                      <span style={modalStyles.loadingSpinner}></span>
                      –ó–∞–≥—Ä—É–∑–∫–∞...
                    </>
                  ) : (
                    <>
                      <span style={modalStyles.refreshIcon}>‚Üª</span>
                      –û–±–Ω–æ–≤–∏—Ç—å
                    </>
                  )}
                </button>
                <button style={modalStyles.closeButton} onClick={() => setShowBidsModal(false)}>√ó</button>
              </div>
            </div>
            
            <div style={modalStyles.content}>
              {bidsError && (
                <div style={modalStyles.errorMessage}>
                  {bidsError}
                  <button 
                    onClick={() => fetchBids()}
                    style={modalStyles.retryButton}
                    disabled={isLoadingBids}
                  >
                    {isLoadingBids ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'}
                  </button>
                </div>
              )}
              
              {isLoadingBids && !bidsError && (
                <div style={{textAlign: 'center', padding: '20px'}}>
                  <div style={{...modalStyles.loadingSpinner, width: '30px', height: '30px', margin: '0 auto 15px'}}></div>
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤...</p>
                </div>
              )}
              
              {!isLoadingBids && (!bids || bids.length === 0) && !bidsError && (
                <div style={modalStyles.noBids}>
                  <p className="no-bids">–ù–∞ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</p>
                  {project.status_id === 1 && isOwner && (
                    <p style={modalStyles.infoText}>
                      –ö–æ–≥–¥–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—Å—è –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç, –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–¥–µ—Å—å.
                    </p>
                  )}
                </div>
              )}
              
              {!isLoadingBids && bids && bids.length > 0 && (
                <div className="bids-list">
                  {bids.map((bid) => (
                    <div key={bid.id || `bid-${Math.random()}`} className="bid-item">
                      <div className="bid-header">
                        <span className="bid-author">–§—Ä–∏–ª–∞–Ω—Å–µ—Ä ID: {bid.userId || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span className="bid-price">{formatPrice(bid.price || 0)} ‚ÇΩ</span>
                      </div>
                      <p className="bid-comment">{bid.comment || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                      <div className="bid-info">
                        <div className="bid-date">
                          –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bid.createdAt ? new Date(bid.createdAt).toLocaleString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                        </div>
                        <div className="bid-status">
                          –°—Ç–∞—Ç—É—Å: {getBidStatusText(bid.status)}
                        </div>
                      </div>
                      {project.status_id === 1 && bid.status === 1 && isOwner && (
                        <div className="bid-actions">
                          <button 
                            onClick={() => handleAcceptBid(bid.id)}
                            className="accept-bid-button"
                          >
                            –ü—Ä–∏–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫
                          </button>
                          <button 
                            onClick={() => handleRejectBid(bid.id)}
                            className="reject-bid-button"
                          >
                            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </>
    );
  };

  const statusInfo = getStatusInfo(project.status_id);

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
  const getCategoryNameById = (categoryId) => {
    const category = categories.find(cat => cat.id === parseInt(categoryId));
    return category ? category.name : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  return (
    <div className="project-card">
      <div className="project-header">
        <h1>{project.title}</h1>
        <div className="project-meta">
          <div className="status-section">
            <div className={`status ${statusInfo.class}`}>
              <span className="status-icon">{statusInfo.icon}</span>
              <span className="status-text">{statusInfo.text}</span>
            </div>
            <div className="status-description">{statusInfo.description}</div>
          </div>
          <span className="category">{project.category}</span>
          <div className="price-info">
            <span className="price">
              –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {formatPrice(project.start_price)} ‚ÇΩ
            </span>
          </div>
        </div>
      </div>

      <div className="project-info">
        <div className="info-section">
          <h2>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h2>
          <p>{project.description}</p>
        </div>

        <div className="info-section">
          <h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
          <ul>
            {project.deadline && (
              <li>
                <strong>–î–µ–¥–ª–∞–π–Ω:</strong> {formatDate(project.deadline)}
              </li>
            )}
            <li>
              <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {categories.length > 0 && project.category_id 
                ? getCategoryNameById(project.category_id) 
                : (project.category || '–ó–∞–≥—Ä—É–∑–∫–∞...')}
            </li>
            <li>
              <strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {formatDate(project.created_at)}
            </li>
            {project.updated_at && (
              <li>
                <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> {formatDate(project.updated_at)}
              </li>
            )}
          </ul>
        </div>

        {project.requirements && (
          <div className="info-section">
            <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
            <p>{project.requirements}</p>
          </div>
        )}

        {isOwner ? (
          <div className="author-controls">
            <button onClick={fetchBids} className="view-bids-button">
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏
            </button>
            <button onClick={() => setShowEditForm(true)} className="edit-btn">
              –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
            {/* <button onClick={onDelete} className="delete-btn">
              –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
            </button> */}
          </div>
        ) : project.status_id === 1 && (
          <div className="response-section">
            {!showResponseForm ? (
              <button 
                onClick={() => setShowResponseForm(true)} 
                className="respond-button"
              >
                –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
              </button>
            ) : (
              <div className="response-form">
                <h3>–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç</h3>
                {responseError && (
                  <div className="error-message">{responseError}</div>
                )}
                <form onSubmit={handleResponse}>
                  <div className="form-group">
                    <label>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É (‚ÇΩ)</label>
                    <input
                      type="number"
                      value={responseData.price}
                      onChange={(e) => setResponseData({
                        ...responseData,
                        price: e.target.value
                      })}
                      required
                      min={project.start_price || 0}
                      placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É"
                    />
                  </div>
                  <div className="form-group">
                    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                    <textarea
                      value={responseData.comment}
                      onChange={(e) => setResponseData({
                        ...responseData,
                        comment: e.target.value
                      })}
                      required
                      rows="4"
                      placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
                    />
                  </div>
                  <div className="form-actions">
                    <button type="submit" className="save-button">
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
                    </button>
                    <button
                      type="button"
                      className="cancel-button"
                      onClick={() => {
                        setShowResponseForm(false);
                        setResponseError('');
                      }}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
        )}

        {showEditForm && isOwner && (
          <div className="edit-form-overlay">
            <div className="edit-form">
              <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
              {editOrderError && (
                <div className="error-message">{editOrderError}</div>
              )}
              <form onSubmit={handleEditOrder}>
                <div className="form-group">
                  <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                  <input
                    type="text"
                    value={orderData.name}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      name: e.target.value
                    })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                  <textarea
                    value={orderData.description}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      description: e.target.value
                    })}
                    required
                    rows="4"
                  />
                </div>
                <div className="form-group">
                  <label>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                  <input
                    type="number"
                    value={orderData.startPrice}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      startPrice: e.target.value
                    })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <div className="category-display" style={{
                    padding: '8px 12px',
                    backgroundColor: '#f5f5f5',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    color: '#555'
                  }}>
                    {getCategoryNameById(orderData.categoryId)}
                    <small style={{
                      display: 'block',
                      marginTop: '4px',
                      color: '#888',
                      fontSize: '12px'
                    }}>(–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞)</small>
                  </div>
                </div>
                <div className="form-group">
                  <label>–°—Ç–∞—Ç—É—Å</label>
                  <select
                    value={orderData.statusId}
                    onChange={(e) => setOrderData({
                      ...orderData,
                      statusId: parseInt(e.target.value)
                    })}
                    required
                  >
                    <option value="1">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                    <option value="2">–í —Ä–∞–±–æ—Ç–µ</option>
                    <option value="3">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                  </select>
                </div>
                <div className="form-actions">
                  <button type="submit" className="save-button">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </button>
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={() => {
                      setShowEditForm(false);
                      setEditOrderError('');
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>

      {/* –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏ */}
      <BidsModal />
    </div>
  );
};

export default ProjectCard;
